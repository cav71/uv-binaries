name: Main-build

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  PACKAGE: ${{ github.event.repository.name }}
  PYTHONPATH: src
  GITHUB_DUMP_FULL: ${{ toJson(github) }}
  GITHUB_DUMP: |
    {
      "version":    "v1", 
      "name":       "${{ github.event.repository.name }}",
      "ref":        "${{ github.ref }}", 
      "sha":        "${{ github.sha }}", 
      "run_number": "${{ github.run_number }}"
    }
  TARGETPY: "3.13"
  TARGETOS: "ubuntu-latest"

jobs:
  betas:
    container:
      image: cavallo71/uv-builder
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}

    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # WARNING!! this is important
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Dump ENV
        shell: bash
        run: |
          echo "=== GITHUB_DUMP ==="
          echo "$GITHUB_DUMP_FULL" | python -m json.tool 
          echo "=== END GITHUB_DUMP ==="

#       # https://github.com/actions/setup-python
#       - name: Setup Python toolchain
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ matrix.python-version }}
# 
#       - name: Python dependencies
#         shell: bash
#         run: |
#             python -m pip install --upgrade pip
#             python -m pip install --group dev
# 
#       - name: Checks & Balances
#         shell: bash
#         run: |
#             python support/checks-and-balances.py
# 
#       - name: Run Python checks (ruff)
#         shell: bash
#         run: |
#             ruff check src tests
#             ruff format --check src tests
# 
#       - name: Run Python checks (mypy)
#         shell: bash
#         env:
#           OUTDIR: build/qa-${{ matrix.python-version }}-${{ matrix.os}}
#         run: |
#             mypy src tests \
#               --no-incremental --xslt-html-report $OUTDIR/mypy
# 
#       - name: Run Python checks (tests)
#         shell: bash
#         env:
#           OUTDIR: build/qa-${{ matrix.python-version }}-${{ matrix.os}}
#         run: |
#           py.test \
#               --cov=${{ env.PACKAGE }} \
#               --cov-report=html:$OUTDIR/coverage --cov-report=xml:$OUTDIR/coverage.xml \
#               --junitxml=$OUTDIR/junit/junit.xml --html=$OUTDIR/junit/junit.html --self-contained-html \
#             tests
# 
#       # https://github.com/codecov/codecov-action
#       - name: Upload coverage reports to Codecov
#         uses: codecov/codecov-action@v5
#         if: ${{ (matrix.python-version == env.TARGETPY) && (matrix.os == env.TARGETOS) }}
#         with:
#           files: $OUTDIR/coverage.xml
#           token: ${{ secrets.CODECOV_TOKEN }}
#           verbose: true # optional (default = false)
# 
#       - name: Archive artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: qa-results-${{ matrix.python-version }}-${{ matrix.os }}
#           path: |
#             build/qa-${{ matrix.python-version }}-${{ matrix.os}}
#             dist
#             .keepme
#         # Use always() to always run this step to publish test results when there are test failures
#         if: always()
